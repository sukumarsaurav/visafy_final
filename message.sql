-- Create table for conversations
CREATE TABLE `conversations` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) DEFAULT NULL COMMENT 'Title for group conversations, NULL for direct messages',
  `type` enum('direct','group','application') NOT NULL COMMENT 'direct: 1-on-1, group: multiple participants, application: related to application',
  `created_by` int(11) NOT NULL,
  `application_id` int(11) DEFAULT NULL COMMENT 'If conversation is related to an application',
  `is_archived` tinyint(1) NOT NULL DEFAULT 0,
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  `updated_at` datetime NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `last_message_at` datetime DEFAULT NULL COMMENT 'Timestamp of the last message',
  `deleted_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `created_by` (`created_by`),
  KEY `application_id` (`application_id`),
  KEY `idx_conversations_type` (`type`),
  KEY `idx_conversations_last_message` (`last_message_at`),
  CONSTRAINT `conversations_created_by_fk` FOREIGN KEY (`created_by`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  CONSTRAINT `conversations_application_id_fk` FOREIGN KEY (`application_id`) REFERENCES `applications` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Create table for conversation participants
CREATE TABLE `conversation_participants` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `conversation_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `role` enum('member','admin','applicant') NOT NULL,
  `is_muted` tinyint(1) NOT NULL DEFAULT 0,
  `joined_at` datetime NOT NULL DEFAULT current_timestamp(),
  `left_at` datetime DEFAULT NULL COMMENT 'When participant left the conversation',
  PRIMARY KEY (`id`),
  UNIQUE KEY `conversation_user` (`conversation_id`, `user_id`),
  KEY `user_id` (`user_id`),
  KEY `idx_participants_role` (`role`),
  CONSTRAINT `participants_conversation_id_fk` FOREIGN KEY (`conversation_id`) REFERENCES `conversations` (`id`) ON DELETE CASCADE,
  CONSTRAINT `participants_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Create messages table
CREATE TABLE `messages` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `conversation_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL COMMENT 'Sender of the message',
  `message` text NOT NULL,
  `is_system_message` tinyint(1) NOT NULL DEFAULT 0 COMMENT 'Indicates if message was generated by system',
  `parent_message_id` int(11) DEFAULT NULL COMMENT 'For message replies/threads',
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  `updated_at` datetime NOT NULL DEFAULT current_timestamp() ON UPDATE current_timestamp(),
  `deleted_at` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `conversation_id` (`conversation_id`),
  KEY `user_id` (`user_id`),
  KEY `parent_message_id` (`parent_message_id`),
  KEY `idx_messages_created_at` (`created_at`),
  CONSTRAINT `messages_conversation_id_fk` FOREIGN KEY (`conversation_id`) REFERENCES `conversations` (`id`) ON DELETE CASCADE,
  CONSTRAINT `messages_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE,
  CONSTRAINT `messages_parent_message_id_fk` FOREIGN KEY (`parent_message_id`) REFERENCES `messages` (`id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Create message read status table
CREATE TABLE `message_read_status` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `message_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL COMMENT 'User who read the message',
  `read_at` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `message_user` (`message_id`, `user_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `read_status_message_id_fk` FOREIGN KEY (`message_id`) REFERENCES `messages` (`id`) ON DELETE CASCADE,
  CONSTRAINT `read_status_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Create message attachments table
CREATE TABLE `message_attachments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `message_id` int(11) NOT NULL,
  `file_name` varchar(255) NOT NULL,
  `file_path` varchar(255) NOT NULL,
  `file_type` varchar(100) NOT NULL,
  `file_size` int(11) NOT NULL COMMENT 'Size in bytes',
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  KEY `message_id` (`message_id`),
  KEY `idx_attachments_file_type` (`file_type`),
  CONSTRAINT `attachments_message_id_fk` FOREIGN KEY (`message_id`) REFERENCES `messages` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Create message reactions table
CREATE TABLE `message_reactions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `message_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `reaction` varchar(50) NOT NULL COMMENT 'Emoji or reaction type',
  `created_at` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `message_user_reaction` (`message_id`, `user_id`, `reaction`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `reactions_message_id_fk` FOREIGN KEY (`message_id`) REFERENCES `messages` (`id`) ON DELETE CASCADE,
  CONSTRAINT `reactions_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Create conversation typing status table
CREATE TABLE `conversation_typing` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `conversation_id` int(11) NOT NULL,
  `user_id` int(11) NOT NULL,
  `is_typing` tinyint(1) NOT NULL DEFAULT 0,
  `last_updated` datetime NOT NULL DEFAULT current_timestamp(),
  PRIMARY KEY (`id`),
  UNIQUE KEY `conversation_user` (`conversation_id`, `user_id`),
  KEY `user_id` (`user_id`),
  CONSTRAINT `typing_conversation_id_fk` FOREIGN KEY (`conversation_id`) REFERENCES `conversations` (`id`) ON DELETE CASCADE,
  CONSTRAINT `typing_user_id_fk` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

-- Function to check unread messages count for a user
DELIMITER //
CREATE FUNCTION get_unread_messages_count(p_user_id INT) 
RETURNS INT
DETERMINISTIC
BEGIN
    DECLARE v_count INT;
    
    SELECT COUNT(m.id) INTO v_count
    FROM messages m
    JOIN conversation_participants cp ON m.conversation_id = cp.conversation_id
    LEFT JOIN message_read_status mrs ON m.id = mrs.message_id AND mrs.user_id = p_user_id
    WHERE cp.user_id = p_user_id
      AND m.user_id != p_user_id
      AND m.deleted_at IS NULL
      AND cp.left_at IS NULL
      AND mrs.id IS NULL;
    
    RETURN v_count;
END //
DELIMITER ;

-- Trigger to update conversation last_message_at timestamp
DELIMITER //
CREATE TRIGGER after_message_insert
AFTER INSERT ON messages
FOR EACH ROW
BEGIN
    -- Update the conversation's last_message_at timestamp
    UPDATE conversations
    SET last_message_at = NEW.created_at
    WHERE id = NEW.conversation_id;
    
    -- Automatically mark message as read by the sender
    INSERT INTO message_read_status (message_id, user_id, read_at)
    VALUES (NEW.id, NEW.user_id, NOW());
    
    -- Remove typing status for the message sender
    UPDATE conversation_typing
    SET is_typing = 0, last_updated = NOW()
    WHERE conversation_id = NEW.conversation_id AND user_id = NEW.user_id;
END //
DELIMITER ;

-- Procedure to create a direct conversation between two users
DELIMITER //
CREATE PROCEDURE create_direct_conversation(
    IN p_creator_id INT,
    IN p_participant_id INT,
    OUT p_conversation_id INT
)
BEGIN
    DECLARE v_existing_conv_id INT;
    DECLARE v_creator_role VARCHAR(10);
    DECLARE v_participant_role VARCHAR(10);
    
    -- Check if direct conversation already exists between these users
    SELECT c.id INTO v_existing_conv_id
    FROM conversations c
    JOIN conversation_participants cp1 ON c.id = cp1.conversation_id
    JOIN conversation_participants cp2 ON c.id = cp2.conversation_id
    WHERE c.type = 'direct'
      AND cp1.user_id = p_creator_id
      AND cp2.user_id = p_participant_id
      AND cp1.left_at IS NULL
      AND cp2.left_at IS NULL
      AND c.deleted_at IS NULL
    LIMIT 1;
    
    IF v_existing_conv_id IS NOT NULL THEN
        -- Return existing conversation ID
        SET p_conversation_id = v_existing_conv_id;
    ELSE
        -- Get user roles
        SELECT user_type INTO v_creator_role FROM users WHERE id = p_creator_id;
        SELECT user_type INTO v_participant_role FROM users WHERE id = p_participant_id;
        
        -- Start transaction
        START TRANSACTION;
        
        -- Create new conversation
        INSERT INTO conversations (type, created_by, created_at, updated_at, last_message_at)
        VALUES ('direct', p_creator_id, NOW(), NOW(), NOW());
        
        -- Get the new conversation ID
        SET p_conversation_id = LAST_INSERT_ID();
        
        -- Add creator as participant
        INSERT INTO conversation_participants (conversation_id, user_id, role, joined_at)
        VALUES (p_conversation_id, p_creator_id, v_creator_role, NOW());
        
        -- Add the other participant
        INSERT INTO conversation_participants (conversation_id, user_id, role, joined_at)
        VALUES (p_conversation_id, p_participant_id, v_participant_role, NOW());
        
        -- Add system message indicating conversation creation
        INSERT INTO messages (conversation_id, user_id, message, is_system_message, created_at)
        VALUES (p_conversation_id, p_creator_id, 'Conversation started', 1, NOW());
        
        COMMIT;
    END IF;
END //
DELIMITER ;

-- Procedure to create a group conversation
DELIMITER //
CREATE PROCEDURE create_group_conversation(
    IN p_creator_id INT,
    IN p_title VARCHAR(255),
    IN p_application_id INT,
    OUT p_conversation_id INT
)
BEGIN
    DECLARE v_creator_role VARCHAR(10);
    
    -- Get creator role
    SELECT user_type INTO v_creator_role FROM users WHERE id = p_creator_id;
    
    -- Start transaction
    START TRANSACTION;
    
    -- Create new conversation
    INSERT INTO conversations (title, type, created_by, application_id, created_at, updated_at, last_message_at)
    VALUES (p_title, 'group', p_creator_id, p_application_id, NOW(), NOW(), NOW());
    
    -- Get the new conversation ID
    SET p_conversation_id = LAST_INSERT_ID();
    
    -- Add creator as participant
    INSERT INTO conversation_participants (conversation_id, user_id, role, joined_at)
    VALUES (p_conversation_id, p_creator_id, v_creator_role, NOW());
    
    -- Add system message indicating group creation
    INSERT INTO messages (conversation_id, user_id, message, is_system_message, created_at)
    VALUES (p_conversation_id, p_creator_id, CONCAT('Group conversation "', p_title, '" created'), 1, NOW());
    
    COMMIT;
END //
DELIMITER ;

-- Create view for conversation summaries
CREATE OR REPLACE VIEW conversation_summaries AS
SELECT 
    c.id AS conversation_id,
    c.title,
    c.type,
    c.application_id,
    c.created_by,
    c.created_at,
    c.last_message_at,
    CASE 
        WHEN c.type = 'direct' THEN 
            (SELECT CONCAT(u.first_name, ' ', u.last_name)
             FROM conversation_participants cp
             JOIN users u ON cp.user_id = u.id
             WHERE cp.conversation_id = c.id 
             AND cp.user_id <> c.created_by
             AND cp.left_at IS NULL
             LIMIT 1)
        ELSE c.title
    END AS display_name,
    (SELECT COUNT(DISTINCT cp.id) 
     FROM conversation_participants cp 
     WHERE cp.conversation_id = c.id AND cp.left_at IS NULL) AS participant_count,
    (SELECT COUNT(m.id) 
     FROM messages m 
     WHERE m.conversation_id = c.id AND m.deleted_at IS NULL) AS message_count,
    (SELECT message 
     FROM messages 
     WHERE conversation_id = c.id AND deleted_at IS NULL 
     ORDER BY created_at DESC LIMIT 1) AS last_message,
    (SELECT user_id 
     FROM messages 
     WHERE conversation_id = c.id AND deleted_at IS NULL 
     ORDER BY created_at DESC LIMIT 1) AS last_message_user_id,
    (SELECT CONCAT(u.first_name, ' ', u.last_name)
     FROM messages m
     JOIN users u ON m.user_id = u.id
     WHERE m.conversation_id = c.id AND m.deleted_at IS NULL 
     ORDER BY m.created_at DESC LIMIT 1) AS last_message_user_name
FROM 
    conversations c
WHERE 
    c.deleted_at IS NULL;

-- Create view for unread messages by user
CREATE OR REPLACE VIEW unread_messages_by_user AS
SELECT 
    cp.user_id,
    cp.conversation_id,
    COUNT(m.id) AS unread_count,
    MAX(m.created_at) AS latest_unread_at
FROM 
    conversation_participants cp
JOIN 
    messages m ON cp.conversation_id = m.conversation_id
LEFT JOIN 
    message_read_status mrs ON m.id = mrs.message_id AND mrs.user_id = cp.user_id
WHERE 
    m.user_id != cp.user_id
    AND cp.left_at IS NULL
    AND m.deleted_at IS NULL
    AND mrs.id IS NULL
GROUP BY 
    cp.user_id, cp.conversation_id;

-- Indexes for performance
CREATE INDEX idx_conversations_deleted_type ON conversations(deleted_at, type);
CREATE INDEX idx_messages_deleted_created ON messages(deleted_at, created_at);
CREATE INDEX idx_participants_user_left ON conversation_participants(user_id, left_at);
